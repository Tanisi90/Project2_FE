{"version":3,"file":"tabset.d.ts","sources":["tabset.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentChecked, EventEmitter, QueryList, TemplateRef } from '@angular/core';\r\nimport { NgbTabsetConfig } from './tabset-config';\r\n/**\r\n * A directive to wrap tab titles that need to contain HTML markup or other directives.\r\n *\r\n * Alternatively you could use the `NgbTab.title` input for string titles.\r\n *\r\n * @deprecated 6.0.0 Please use NgbNav instead\r\n */\r\nexport declare class NgbTabTitle {\r\n    templateRef: TemplateRef<any>;\r\n    constructor(templateRef: TemplateRef<any>);\r\n}\r\n/**\r\n * A directive to wrap content to be displayed in a tab.\r\n *\r\n * @deprecated 6.0.0 Please use NgbNav instead\r\n */\r\nexport declare class NgbTabContent {\r\n    templateRef: TemplateRef<any>;\r\n    constructor(templateRef: TemplateRef<any>);\r\n}\r\n/**\r\n * A directive representing an individual tab.\r\n *\r\n * @deprecated 6.0.0 Please use NgbNav instead\r\n */\r\nexport declare class NgbTab implements AfterContentChecked {\r\n    /**\r\n     * The tab identifier.\r\n     *\r\n     * Must be unique for the entire document for proper accessibility support.\r\n     */\r\n    id: string;\r\n    /**\r\n     * The tab title.\r\n     *\r\n     * Use the [`NgbTabTitle`](#/components/tabset/api#NgbTabTitle) directive for non-string titles.\r\n     */\r\n    title: string;\r\n    /**\r\n     * If `true`, the current tab is disabled and can't be toggled.\r\n     */\r\n    disabled: boolean;\r\n    titleTpl: NgbTabTitle | null;\r\n    contentTpl: NgbTabContent | null;\r\n    titleTpls: QueryList<NgbTabTitle>;\r\n    contentTpls: QueryList<NgbTabContent>;\r\n    ngAfterContentChecked(): void;\r\n}\r\n/**\r\n * The payload of the change event fired right before the tab change.\r\n *\r\n * @deprecated 6.0.0 Please use NgbNav instead\r\n */\r\nexport interface NgbTabChangeEvent {\r\n    /**\r\n     * The id of the currently active tab.\r\n     */\r\n    activeId: string;\r\n    /**\r\n     * The id of the newly selected tab.\r\n     */\r\n    nextId: string;\r\n    /**\r\n     * Calling this function will prevent tab switching.\r\n     */\r\n    preventDefault: () => void;\r\n}\r\n/**\r\n * A component that makes it easy to create tabbed interface.\r\n *\r\n * @deprecated 6.0.0 Please use NgbNav instead\r\n */\r\nexport declare class NgbTabset implements AfterContentChecked {\r\n    static ngAcceptInputType_justify: string;\r\n    static ngAcceptInputType_orientation: string;\r\n    justifyClass: string;\r\n    tabs: QueryList<NgbTab>;\r\n    /**\r\n     * The identifier of the tab that should be opened **initially**.\r\n     *\r\n     * For subsequent tab switches use the `.select()` method and the `(tabChange)` event.\r\n     */\r\n    activeId: string;\r\n    /**\r\n     * If `true`, non-visible tabs content will be removed from DOM. Otherwise it will just be hidden.\r\n     */\r\n    destroyOnHide: boolean;\r\n    /**\r\n     * The horizontal alignment of the tabs with flexbox utilities.\r\n     */\r\n    set justify(className: 'start' | 'center' | 'end' | 'fill' | 'justified');\r\n    /**\r\n     * The orientation of the tabset.\r\n     */\r\n    orientation: 'horizontal' | 'vertical';\r\n    /**\r\n     * Type of navigation to be used for tabs.\r\n     *\r\n     * Currently Bootstrap supports only `\"tabs\"` and `\"pills\"`.\r\n     *\r\n     * Since `3.0.0` can also be an arbitrary string (ex. for custom themes).\r\n     */\r\n    type: 'tabs' | 'pills' | string;\r\n    /**\r\n     * A tab change event emitted right before the tab change happens.\r\n     *\r\n     * See [`NgbTabChangeEvent`](#/components/tabset/api#NgbTabChangeEvent) for payload details.\r\n     */\r\n    tabChange: EventEmitter<NgbTabChangeEvent>;\r\n    constructor(config: NgbTabsetConfig);\r\n    /**\r\n     * Selects the tab with the given id and shows its associated content panel.\r\n     *\r\n     * Any other tab that was previously selected becomes unselected and its associated pane is removed from DOM or\r\n     * hidden depending on the `destroyOnHide` value.\r\n     */\r\n    select(tabId: string): void;\r\n    ngAfterContentChecked(): void;\r\n    private _getTabById;\r\n}\r\n"]}